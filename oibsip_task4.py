# -*- coding: utf-8 -*-
"""OIBSIP_Task4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/127z72K9JeQ26CIaOLEv4HJ8UqhcY5FqV
"""

from google.colab import files
import pandas as pd

# Upload CSV file
uploaded = files.upload()

import pandas as pd

# Specifying the encoding
df = pd.read_csv('spam.csv', encoding='ISO-8859-1')
df

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Check the structure of the dataframe
print(df.info())

# Display the column names
print(df.columns)

# Drop unnecessary columns
df = df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'])

# Rename the columns
df.columns = ['label', 'message']

df['label'] = df['label'].map({'ham': 0, 'spam': 1})
print(df.head())

from sklearn.model_selection import train_test_split

X = df['message']
y = df['label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f'Training data shape: {X_train.shape}')
print(f'Test data shape: {X_test.shape}')

from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline

spam_detector = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('tfidf', TfidfTransformer()),
    ('classifier', MultinomialNB())
])

# Train the model
spam_detector.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Predict the labels for the test set
y_pred = spam_detector.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.4f}')

# Display the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:')
print(conf_matrix)

# Display the classification report
class_report = classification_report(y_test, y_pred)
print('Classification Report:')
print(class_report)

# Test with a new message
new_messages = [
    "Congratulations! You've won a $1,000 Walmart gift card. Go to http://bit.ly/123456 to claim now.",
    "Hi John, are we still meeting for lunch tomorrow?"
]

predictions = spam_detector.predict(new_messages)
print(predictions) # 1 = Spam, 0 = Not Spam

import matplotlib.pyplot as plt
import seaborn as sns

# Plot the distribution of spam and ham messages
plt.figure(figsize=(6,4))
sns.countplot(x='label', data=df)
plt.title('Distribution of Spam and Ham Messages')
plt.xlabel('Label (0: Ham, 1: Spam)')
plt.ylabel('Count')
plt.show()

# Generate the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot the confusion matrix
plt.figure(figsize=(8,6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Ham', 'Spam'], yticklabels=['Ham', 'Spam'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Function to display sample emails
def display_samples(data, label, num_samples=5):
    samples = data[data['label'] == label]['message'].sample(num_samples, random_state=42)
    for i, message in enumerate(samples, 1):
        print(f'--- Message {i} ---')
        print(message)
        print()

# Display sample spam messages
print("Sample Spam Messages:")
display_samples(df, label=1)

# Display sample ham messages
print("Sample Ham Messages:")
display_samples(df, label=0)

from sklearn.metrics import classification_report
import pandas as pd

# Generate the classification report
class_report = classification_report(y_test, y_pred, target_names=['Ham', 'Spam'], output_dict=True)

# Convert classification report to a dataframe
class_report_df = pd.DataFrame(class_report).transpose()

# Plot the classification report
plt.figure(figsize=(10,6))
sns.heatmap(class_report_df.iloc[:-1, :-1], annot=True, cmap='Blues')
plt.title('Classification Report')
plt.show()