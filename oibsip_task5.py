# -*- coding: utf-8 -*-
"""OIBSIP_Task5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y5t4X8wTQXMPIZwusaoGxdnNEEJAzycw
"""

from google.colab import files

# Upload CSV file
uploaded = files.upload()

# Read the CSV file
import pandas as pd
data = pd.read_csv('Advertising.csv')
data

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Define features (X) and target variable (y)
X = data[['TV', 'Radio', 'Newspaper']]  # Features
y = data['Sales']  # Target variable

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model selection and training
model = LinearRegression()
model.fit(X_train, y_train)

# Visualization of predicted vs. actual sales
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', lw=2)
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs. Predicted Sales")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Feature vs. Target Plots
fig, axes = plt.subplots(1, 3, figsize=(18, 6))

for i, feature in enumerate(['TV', 'Radio', 'Newspaper']):
    axes[i].scatter(data[feature], data['Sales'], color='blue')
    axes[i].set_xlabel(feature)
    axes[i].set_ylabel('Sales')
    axes[i].set_title(f'{feature} vs. Sales')

plt.tight_layout()
plt.show()

# Residual Plot
residuals = y_test - y_pred
plt.figure(figsize=(8, 6))
plt.scatter(y_pred, residuals, color='blue')
plt.xlabel("Predicted Sales")
plt.ylabel("Residuals")
plt.title("Residual Plot")
plt.axhline(y=0, color='red', linestyle='--')
plt.show()

# Model evaluation
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared Score:", r2)

# Retrieve coefficients assigned to each feature
coefficients = model.coef_

# Create a DataFrame to display feature importance
feature_importance = pd.DataFrame({'Feature': X.columns, 'Coefficient': coefficients})
feature_importance['Absolute Coefficient'] = feature_importance['Coefficient'].abs()
feature_importance = feature_importance.sort_values(by='Absolute Coefficient', ascending=False)

# Display feature importance
print("Feature Importance:")
print(feature_importance)

# Importing necessary libraries
import matplotlib.pyplot as plt

# Plotting feature importance
plt.figure(figsize=(10, 6))
plt.barh(feature_importance['Feature'], feature_importance['Absolute Coefficient'], color='skyblue')
plt.xlabel('Absolute Coefficient')
plt.ylabel('Feature')
plt.title('Feature Importance')
plt.gca().invert_yaxis()  # Invert y-axis to display the most important feature at the top
plt.show()